{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","className","Statistics","this","props","good","neutral","bad","total","positivePercentage","Component","defaultProps","CounterControls","onLeaveFeedback","type","onClick","Notification","message","App","state","handleChange","e","field","target","textContent","toLowerCase","setState","prevState","Object","values","reduce","previousValue","currentValue","percentage","Math","round","FeedbackOptions","countTotalFeedback","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAUeA,G,MAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKC,UAAU,UAAf,UACE,6BAAKF,IACJC,OCJgBE,E,uKAMjB,OACE,gCACE,2CACA,uBACA,yCAAYC,KAAKC,MAAMC,KAAvB,OACA,uBACA,4CAAeF,KAAKC,MAAME,QAA1B,OACA,uBAEA,wCAAWH,KAAKC,MAAMG,OACtB,uBACA,uBACA,0CAAaJ,KAAKC,MAAMI,SACxB,uBACA,uBAEA,sDAAyBL,KAAKC,MAAMK,mBAApC,c,GAtBgCC,aAAnBR,EAGZS,aAAe,GCHxB,IAceC,EAdS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,gCACE,wBAAQC,KAAK,SAASC,QAASF,EAA/B,kBAGA,wBAAQC,KAAK,SAASC,QAASF,EAA/B,qBAGA,wBAAQC,KAAK,SAASC,QAASF,EAA/B,qBCAWG,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,8BACE,kCAAKA,QCCUC,E,4MACnBC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPa,aAAe,SAAAC,GACb,IAAMC,EAAQD,EAAEE,OAAOC,YAAYC,cACnC,EAAKC,UAAS,SAAAC,GACZ,OAAO,eACJL,EAAQ,EAAKH,MAAMG,GAAS,O,mEAWjC,OALeM,OAAOC,OAAO1B,KAAKgB,OAEnBW,QAAO,SAAUC,EAAeC,GAC7C,OAAOD,EAAgBC,O,wDAMzB,IAQMC,EARkB9B,KAAKgB,MAAMd,KAEpBuB,OAAOC,OAAO1B,KAAKgB,OAEnBW,QAAO,SAAUC,EAAeC,GAC7C,OAAOD,EAAgBC,KAGsB,IAE/C,OAAIC,EACKC,KAAKC,MAAMF,GAEb,I,+BAGC,IAAD,EACwB9B,KAAKgB,MAA5Bd,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,eAAC,EAAD,CAASR,MAAM,4BAAf,UACE,cAACqC,EAAD,CAAiBvB,gBAAiBV,KAAKiB,eACtCjB,KAAKkC,qBAAuB,EAC3B,cAAC,EAAD,CACEhC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOL,KAAKkC,qBACZ5B,mBAAoBN,KAAKmC,oCAG3B,cAAC,EAAD,CAAcrB,QAAQ,6B,GAzDCP,aCDjC6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.46e9e734.chunk.js","sourcesContent":["import React from 'react';\nimport './Section.css';\n\nconst Section = ({ title, children }) => (\n  <div className=\"Section\">\n    <h2>{title}</h2>\n    {children}\n  </div>\n);\n\nexport default Section;\n","import React, { Component } from 'react';\n\nexport default class Statistics extends Component {\n  static propTypes = {};\n\n  static defaultProps = {};\n\n  render() {\n    return (\n      <div>\n        <p>Statistics</p>\n        <br />\n        <span>Good {this.props.good} </span>\n        <br />\n        <span>Neutral {this.props.neutral} </span>\n        <br />\n\n        <span>Bad {this.props.bad}</span>\n        <br />\n        <br />\n        <span>Total {this.props.total}</span>\n        <br />\n        <br />\n\n        <span>Positive feedback {this.props.positivePercentage}%</span>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nconst CounterControls = ({ onLeaveFeedback }) => (\n  <div>\n    <button type=\"button\" onClick={onLeaveFeedback}>\n      Good\n    </button>\n    <button type=\"button\" onClick={onLeaveFeedback}>\n      Neutral\n    </button>\n    <button type=\"button\" onClick={onLeaveFeedback}>\n      Bad\n    </button>\n  </div>\n);\n\nexport default CounterControls;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  return (\n    <div>\n      <p> {message}</p>\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport Section from './components/Section/Section';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Notification from './components/Notification/Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleChange = e => {\n    const field = e.target.textContent.toLowerCase();\n    this.setState(prevState => {\n      return {\n        [field]: this.state[field] + 1,\n      };\n    });\n  };\n  countTotalFeedback() {\n    let total;\n    const values = Object.values(this.state);\n\n    total = values.reduce(function (previousValue, currentValue) {\n      return previousValue + currentValue;\n    });\n    return total;\n  }\n\n  countPositiveFeedbackPercentage() {\n    const positivFeedback = this.state.good;\n    let total;\n    const values = Object.values(this.state);\n\n    total = values.reduce(function (previousValue, currentValue) {\n      return previousValue + currentValue;\n    });\n\n    const percentage = (positivFeedback / total) * 100;\n    // 0 делим на 0 = NaN\n    if (percentage) {\n      return Math.round(percentage);\n    }\n    return 0;\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <Section title=\"Please leave the feedback\">\n        <FeedbackOptions onLeaveFeedback={this.handleChange} />\n        {this.countTotalFeedback() > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}