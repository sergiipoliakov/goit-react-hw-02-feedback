{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","className","defaultProps","Statistics","props","good","neutral","bad","total","positivePercentage","CounterControls","onLeaveFeedback","type","name","onClick","Notification","message","App","state","handleChange","e","field","target","setState","prevState","Object","values","this","reduce","previousValue","currentValue","percentage","Math","round","FeedbackOptions","countTotalFeedback","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAEMA,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKC,UAAU,UAAf,UACE,oBAAIA,UAAU,gBAAd,SAA+BF,IAC9BC,MAIUF,IAEfA,EAAQI,aAAe,CACrBH,MAAO,6BCVT,IAAMI,EAAa,SAAAC,GAAU,IACnBC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAEnC,OACE,sBAAKR,UAAU,aAAf,UACE,4CAEA,uBAAMA,UAAU,kBAAhB,kBAAwCI,EAAxC,OAEA,uBAAMJ,UAAU,kBAAhB,qBAA2CK,EAA3C,OAEA,uBAAML,UAAU,kBAAhB,iBAAuCM,KAEvC,uBAAMN,UAAU,kBAAhB,mBAAyCO,KAEzC,uBAAMP,UAAU,kBAAhB,+BACqBQ,EADrB,WAONN,EAAWD,aAAe,CACxBG,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAWPN,QCTAO,EA7BS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,sBAAKV,UAAU,kBAAf,UACE,wBACEA,UAAU,yBACVW,KAAK,SACLC,KAAK,OACLC,QAASH,EAJX,kBAQA,wBACEV,UAAU,yBACVW,KAAK,SACLC,KAAK,UACLC,QAASH,EAJX,qBAQA,wBACEV,UAAU,yBACVW,KAAK,SACLC,KAAK,MACLC,QAASH,EAJX,qBClBEI,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,qBAAKf,UAAU,eAAf,SACE,kCAAKe,QAKID,IAEfA,EAAab,aAAe,CAC1Bc,QAAS,qB,ICPUC,E,4MACnBC,MAAQ,CACNb,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPY,aAAe,SAAAC,GACb,IAAMC,EAAQD,EAAEE,OAAOT,KAEvB,EAAKU,UAAS,SAAAC,GACZ,OAAO,eACJH,EAAQ,EAAKH,MAAMG,GAAS,O,mEAWjC,OALeI,OAAOC,OAAOC,KAAKT,OAEnBU,QAAO,SAAUC,EAAeC,GAC7C,OAAOD,EAAgBC,O,wDAMzB,IAQMC,EARkBJ,KAAKT,MAAMb,KAEpBoB,OAAOC,OAAOC,KAAKT,OAEnBU,QAAO,SAAUC,EAAeC,GAC7C,OAAOD,EAAgBC,KAGsB,IAE/C,OAAIC,EACKC,KAAKC,MAAMF,GAEb,I,+BAGC,IAAD,EACwBJ,KAAKT,MAA5Bb,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,eAAC,EAAD,CAASR,MAAM,4BAAf,UACE,cAACmC,EAAD,CAAiBvB,gBAAiBgB,KAAKR,eACtCQ,KAAKQ,qBAAuB,EAC3B,cAAC,EAAD,CACE9B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,KAAKQ,qBACZ1B,mBAAoBkB,KAAKS,oCAG3B,cAAC,EAAD,CAAcpB,QAAQ,6B,GA1DCqB,aCDjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0a24f7eb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <div className=\"Section\">\n    <h2 className=\"Section-title\">{title}</h2>\n    {children}\n  </div>\n);\n\nexport default Section;\n\nSection.defaultProps = {\n  title: 'Please leave the feedback',\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst Statistics = props => {\n  const { good, neutral, bad, total, positivePercentage } = props;\n\n  return (\n    <div className=\"Statistics\">\n      <h2>Statistics</h2>\n\n      <span className=\"Statistics-item\">Good {good} </span>\n\n      <span className=\"Statistics-item\">Neutral {neutral} </span>\n\n      <span className=\"Statistics-item\">Bad {bad}</span>\n\n      <span className=\"Statistics-item\">Total {total}</span>\n\n      <span className=\"Statistics-item\">\n        Positive feedback {positivePercentage}%\n      </span>\n    </div>\n  );\n};\n\nStatistics.defaultProps = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n  total: 0,\n  positivePercentage: 0,\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nconst CounterControls = ({ onLeaveFeedback }) => (\n  <div className=\"CounterControls\">\n    <button\n      className=\"CounterControls-button\"\n      type=\"button\"\n      name=\"good\"\n      onClick={onLeaveFeedback}\n    >\n      Good\n    </button>\n    <button\n      className=\"CounterControls-button\"\n      type=\"button\"\n      name=\"neutral\"\n      onClick={onLeaveFeedback}\n    >\n      Neutral\n    </button>\n    <button\n      className=\"CounterControls-button\"\n      type=\"button\"\n      name=\"bad\"\n      onClick={onLeaveFeedback}\n    >\n      Bad\n    </button>\n  </div>\n);\n\nexport default CounterControls;\n\nCounterControls.propTypes = {\n  onLeaveFeedback: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return (\n    <div className=\"Notification\">\n      <p> {message}</p>\n    </div>\n  );\n};\n\nexport default Notification;\n\nNotification.defaultProps = {\n  message: 'No feedback given',\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport Section from './components/Section/Section';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Notification from './components/Notification/Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleChange = e => {\n    const field = e.target.name;\n\n    this.setState(prevState => {\n      return {\n        [field]: this.state[field] + 1,\n      };\n    });\n  };\n  countTotalFeedback() {\n    let total;\n    const values = Object.values(this.state);\n\n    total = values.reduce(function (previousValue, currentValue) {\n      return previousValue + currentValue;\n    });\n    return total;\n  }\n\n  countPositiveFeedbackPercentage() {\n    const positivFeedback = this.state.good;\n    let total;\n    const values = Object.values(this.state);\n\n    total = values.reduce(function (previousValue, currentValue) {\n      return previousValue + currentValue;\n    });\n\n    const percentage = (positivFeedback / total) * 100;\n    // 0 делим на 0 = NaN\n    if (percentage) {\n      return Math.round(percentage);\n    }\n    return 0;\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <Section title=\"Please leave the feedback\">\n        <FeedbackOptions onLeaveFeedback={this.handleChange} />\n        {this.countTotalFeedback() > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}